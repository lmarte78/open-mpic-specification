openapi: 3.0.3
info:
  title: Open Multi-Perspective Issuance Corroboration APIv2 Spec
  description: |-
    This is the spec for the Open MPIC Protocol. This API implements a multiple-perspective vantage point system for Domain Control Validation (DCV) and CAA checking.
  termsOfService: https://tbd
  contact:
    email: open-mpic@princeton.edu
  license:
    name: MIT License
  version: 2.2.0

externalDocs:
  description: Find out more about the project at open-mpic.org
  url: https://open-mpic.org/

servers:
  - url: https://your-api.example.com/

paths:
  /mpic:
    post:
      summary: Perform MPIC.
      requestBody:
        description: Parameters for MPIC
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/DCVParams'
              - $ref: '#/components/schemas/CAAParams'
            example: 
              check_type: caa
              domain_or_ip_target: example.com
        required: true
      responses:
        '200':
          description: Successfully processed request. Validation may-or-may-not be successful. Check response body.
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CAAResponse'
                - $ref: '#/components/schemas/DCVResponse'
              example:
                request_orchestration_parameters: null
                actual_orchestration_parameters:
                  perspective_count: 6
                  quorum_count: 4
                  attempt_count: 1
                is_valid: true
                check_type: caa
                perspectives:
                  - perspective_code: us-east-2
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089205545500
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                  - perspective_code: eu-west-2
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089670721500
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                  - perspective_code: ap-northeast-2
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089672918800
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                  - perspective_code: ap-southeast-1
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089693880600
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                  - perspective_code: eu-central-1
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089754537000
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                  - perspective_code: us-west-2
                    check_passed: true
                    errors: null
                    timestamp_ns: 1725822089912938200
                    check_type: caa
                    details:
                      caa_record_present: false
                      found_at: null
                      response: null
                caa_check_parameters: null
        '400':
          description: Bad Request
        '403':
          description: Unauthorized
        '500':
          description: Internal Server Error

components:
  schemas:
    CheckType:
      type: string
      enum: ['dcv', 'caa']
    CheckTypeDCV:
      type: string
      enum: ['dcv']
    CheckTypeCAA:
      type: string
      enum: ['caa']

    DomainOrIPTarget:
      type: string
      example: "example.com"
      description: "The FQDN (no trailing .) or public IP for which control is being validated."
    
    DcvCheckParameters:
      type: object
      properties:
        validation_method:
          $ref: '#/components/schemas/ValidationMethod'
        validation_details:
          description: "The validation method(s) to be performed at the various network perspectives."
          oneOf:
            - $ref: '#/components/schemas/AcmeHttp01'
            - $ref: '#/components/schemas/AcmeDns01'
            - $ref: '#/components/schemas/WebsiteChangeV2'
            - $ref: '#/components/schemas/DNSChange'
            - $ref: '#/components/schemas/ContactPhoneTxt'
            - $ref: '#/components/schemas/ContactPhoneCaa'
            - $ref: '#/components/schemas/ContactEmailTxt'
            - $ref: '#/components/schemas/ContactEmailCaa'
            - $ref: '#/components/schemas/ReverseAddressLookup'
    CaaCheckParameters:
      type: object
      properties:
        certificate_type:
          type: string
          enum: ['tls-server', 'tls-server:wildcard', 's-mime'] # doc: https://swagger.io/docs/specification/data-models/enums/
          description: "Specifies the type of certificate the CA will be signing for theapplicant as it pertains to parsing CAA records."
        caa_domains:
          type: array
          example:
            - "letsencrypt.org"
          description: "Valid CAA domain names in issue or issuewild (e.g., CAA 0 issue     \"letsencrypt.org\")tags that permit issuance by the calling CA. If left empty, the     default configured CAA domain name(s) are used."
          items:
            type: string

    ValidationMethod:
      description:  "The type of domain control validation the network perspectives should use."
      type: string
      enum: ['acme-dns-01', 'acme-http-01', 'contact-email', 'contact-phone',
             'dns-change', 'ip-lookup', 'tls-using-alpn' 'website-change-v2',] # doc: https://swagger.io/docs/specification/data-models/enums/

    WebsiteChangeV2:
      type: object
      required: 
      - http_token_path
      - challenge_value
      properties:
        http_token_path:
          type: string
          example: 'challenge.html'
          description: "The path to check for the challenge token. The full URL used to retrieve the expected value is constructed via the syntax \"http://\" + identifier + \"/.well-known/pki-validation/\" + path."
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed at this URL. The API ensures the challenge value is contained in the response webpage obtained from the domain."
        match_regex:
          type: string
          example: '^\w*TOKENVAL\w*$'
          description: "An optional regex string which must have a match in the returned webpage contents for the challenge to be successful. This is checked in addition to ensuring the token is contained in the webpage."
        url_scheme:
          description: "HTTP (port 80) or HTTPS (port 443). If not specified, the protocol is assumed to be HTTP."
          type: string
          enum: ['http', 'https']

    AcmeHttp01:
      type: object
      required: 
      - token
      - key_authorization
      properties:
        token:
          type: string
          example: 'ACME_TOKEN'
          description: "The token for the ACME http-01 challenge as described in RFC 8555 Section 8.3."
        key_authorization:
          type: string
          example: 'key_authorization'
          description: "The key authorization to be sent in the HTTP GET body as described in RFC 8555 Section 8.1. The value will be checked by stripping trailing whitespace from the response and then performing an equality check on the two strings."
    
    DNSChange:
      type: object
      required:
        - dns_name_prefix
        - dns_record_type
        - challenge_value
      properties:
        dns_name_prefix:
          type: string
          example: '_dcv'
          description: "The domain label prefix where to look for the challenge_value. If label is not an empty string, the FQDN which will be queried for the challenge_value is constructed via the syntax label + \".\" + domain_or_ip_target + \".\". If label is an empty string the query is sent directly to domain_or_ip_target + \".\". domain_or_ip_target MUST be a domain to use this method."
        dns_record_type:
          type: string
          example: 'TXT'
          description: "The DNS record type to be queried."
        challenge_value:
          type: string
          example: 'challenge_token'
          description: "The expected value to be observed as a response to this DNS challenge. The challenge will be completed successfully if the challenge_value is observed within one of the RDATA fields associated with this DNS record type at the FQDN."
        require_exact_match:
          type: boolean
          example: false
          description: "Whether or not the challenge_value must be identical to the observed challenge in the DNS record. If false, the challenge_value must be a substring of the observed challenge. Defaults to true."

    AcmeDns01:
      type: object
      required:
        - key_authorization
      properties:
        key_authorization:
          type: string
          description: "The SHA-256 digest [FIPS180-4] of the key authorization as defined in RFC 8555 Section 8.4. The challenge will be completed successfully if the expected-challenge is observed byte-for-byte identical in one of the RDATA fields found with the query for _acme-challenge.{domain_or_ip_target} IN TXT. To use this method, domain_or_ip_target MUST be a domain."

    ContactEmailTxt:
      type: object
      required:
        - challenge_value
      properties:
        challenge_value:
          type: string
          example: 'contact.me@example.com'
          description: "The expected value to be observed in the TXT record for the email address. The challenge will be completed successfully if the challenge_value is observed in the TXT record for the email address."

    ContactEmailCaa:
      type: object
      required:
        - challenge_value
        - dns_name_prefix
      properties:
        challenge_value:
          type: string
          example: 'contact.me@example.com'
          description: "The expected value to be observed in the CAA record for the email address. The challenge will be completed successfully if the challenge_value is observed in the CAA record for the email address."

    ContactPhoneTxt:
      type: object
      required:
        - challenge_value
      properties:
        challenge_value:
          type: string
          example: '555-555-5555'
          description: "The expected value to be observed in the TXT record for the phone number. The challenge will be completed successfully if the challenge_value is observed in the TXT record for the phone number."

    ContactPhoneCaa:
      type: object
      required:
        - challenge_value
        - dns_name_prefix
      properties:
        challenge_value:
          type: string
          example: '555-555-5555'
          description: "The expected value to be observed in the CAA record for the phone number. The challenge will be completed successfully if the challenge_value is observed in the CAA record for the phone number."
        dns_name_prefix:
          type: string
          example: '_dcv'
          description: "The domain label prefix where to look for the challenge_value. If label is not an empty string, the FQDN which will be queried for the challenge_value is constructed via the syntax label + \".\" + domain_or_ip_target + \".\". If label is an empty string the query is sent directly to domain_or_ip_target + \".\". domain_or_ip_target MUST be a domain to use this method."

    ReverseAddressLookup:
      type: object
      required:
        - challenge_value
        - dns_record_type
        - dns_name_prefix
      properties:
        challenge_value:
          type: string
          example: '198.0.2.1'
          description: "The expected value to be observed in the DNS record for the IP address. The challenge will be completed successfully if the challenge_value is observed in the DNS record for the IP address."
        dns_record_type:
          type: string
          example: 'A'
          description: "The DNS record type to be queried. Must be A or AAAA."
        dns_name_prefix:
            type: string
            example: '_dcv'
            description: "The domain label prefix where to look for the challenge_value. If label is not an empty string, the FQDN which will be queried for the challenge_value is constructed via the syntax label + \".\" + domain_or_ip_target + \".\". If label is an empty string the query is sent directly to domain_or_ip_target + \".\". domain_or_ip_target MUST be a domain to use this method."

    DetailsHTTPMethod:
      type: object
      description: "Details related to the http-based validation methods from a perspective."
      required:
        - response_history
        - response_url
        - response_status_code
        - response_page
      properties:
        response_history:
          description: "An array of all redirects that were given before the final response was found. It can be empty if there are no redirects. Otherwise it contains a list of objects with status codes and the URLs that returned those status codes in order starting with the original challenge URL."
          type: array
          items:
            type: object
            required:
            - response_status_code
            - response_url
            properties:
              response_status_code:
                type: integer
                description: "The status code retrieved from this URL."
              response_url:
                type: string
                description: "The URL that returned this status code."
        response_url:
          description: "The URL that returned the final response. This is equal to the original challenge URL if there are no redirects."
          type: string
        response_status_code:
          type: integer
          description: "The status code returned by the final URL."
        response_page:
          type: string
          description: "The first 100 bytes of the page returned at the final URL. If the page is less than 100 bytes, the entire page content is returned."
        resolved_ip:
          type: string
          description: "The IP address used to communicate with the domain_or_ip_target."
    DetailsDNSMethod:
      type: object
      required:
        - records_seen
        - response_code
        - ad_flag
        - found_at
      properties:
        records_seen:
          type: array
          description: "A list of the records in the RRset retrieved for the DNS query. Empty list is acceptable if there are no RRsets"
        response_code:
          type: integer
          description: "The DNS response code (RCODE) resulting from the query."
        ad_flag:
          type: boolean
          description: "Whether or not the recursive resolver set the Authenticated Data (AD) flag in its DNS response."
        found_at:
            type: string
            description: "The domain where the DNS records were resolved when performing the DNS lookup for the identifier. (DNS records may be hosted at parent zone of identifier.)"
                
    # TLS-ALPN is getting nixed from the standard until there is implementation to accompany it.
    #TLSALPNValidation:
    #  type: object
    #  required:
    #  - expected-challenge
    #  properties:
    #    expected-challenge:
    #      type: string
    #      example: 'challenge_token'
    #      description: "The expected value to be observed inside the acmeIdentifier extension of #the self-signed certificate presented during the TLS handshake. The value will be #checked by stripping leading or trailing whitespace from both the extension value and #the expected value and then performing an equality check on the two strings."
    
    OrchestrationParameters:
      type: object
      properties:
        perspective_count:
          type: integer
          example: 6
          description: "The number of vantage points to use for this request. Allows the implementing API endpoint flexibility in picking vantage points so long as vantage points are picked from at least two different Regional Internet Registry service regions if possible. Vantage point selection by the implementing server MUST be deterministic for a particular \"domain\" value such that requests with the same domain value to the same API endpoint always result in the same vantage point usage (presuming the API endpoint was not reconfigured between requests). Implementations SHOULD also make vantage point selection non-predictable (e.g., using a secret keyed cryptographic hash) so that an outside entity without access to the internal configuration of the API endpoint cannot predict wich vantage points will be used for a specified domain. This property CANNOT be specified with the \"perspectives\" array that forces use of a particular set of perspectives."
        quorum_count:
          type: integer
          example: 5
          description: "The number of network perspectives that must successfully complete the the validation methods specified. As long as this value is greater than 2, the API will enforce that successful network perspectives must be spread across two Regional Internet Registry service regions (so long as there is a perspective used in at least two different Regional Internet Registry service regions). A quorum count of 0 instructs the API to operate in a monitoring only mode and always return success = true even if no vantage points succeed. In general 0 <= quorum count <= perspectives-count."
        attempt_count:
          type: integer
          example: 3
          description: "The number of times validation or CAA checks has been retried to get the result of a single API POST request. An implementation may choose to retry with the same or different perspectives each time. It is recommended implementations cap the number of distinct sets of perspectives that will ever validate a particular identifier to avoid adversaries retrying many times in the interest of getting favorable perspective sets."

    PerspectiveResponsesValidation:
      type: array
      description: "Detailed responses from the result of the validation attempt at each perspective."
      items:
        type: object
        required:
          - perspective
          - check_passed
          - timestamp_ns
          - check_type
          - details
          - errors
        properties:
          perspective:
            type: string
            example: "us-east-2"
            description: "A unique identifier for the perspective used"
          check_passed:
            type: boolean
            example: True
            description: "Whether or not domain control validation was successful at this perspective."
          timestamp_ns:
            type: integer
            format: int64
            description: "The epoch timestamp in nanoseconds of the check."
          check_type:
            $ref: '#/components/schemas/CheckTypeDCV'
          attestation:
            type: object
            description: "Information (e.g., digital signatures) from a remote perspective that allows for the response generated to be verified."
          details:
            type: object
            properties:
              acme_http_01:
                allOf:
                - $ref: '#/components/schemas/DetailsHTTPMethod'
                nullable: true
              acme_dns_01:
                allOf: 
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              website_change_v2:
                allOf: 
                - $ref: '#/components/schemas/DetailsHTTPMethod'
                nullable: true
              dns_change:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              contact_phone_txt:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              contact_phone_caa:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              contact_email_txt:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              contact_email_caa:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
              reverse_address_lookup:
                allOf:
                - $ref: '#/components/schemas/DetailsDNSMethod'
                nullable: true
          errors:
            type: array
            items:
              type: object
              properties:
                error_type:
                  type: string
                  example: "validation:acme-dns-01"
                  description: "The type of the error in the format \"type:subtype\". If associated with a validation method the error type should read \"validation:affected-method\"."
                error_message:
                  type: string
                  example: "Observed token 1234 instead of expected token 4567 at _acme-challenge.example.com in record type TXT."
                  description: "An error message explaining the observed error."
            nullable: true

    PerspectiveResponsesCAA:
      type: array
      description: "Detailed responses from the result of the CAA check at each perspective."
      items:
        type: object
        required:
          - perspective
          - check_passed
          - errors
          - timestamp_ns
          - check_type
          - details
        properties:
          perspective:
            type: string
            example: "arin.us-east-2"
            description: "A unique identifier for the perspective used in the format \"rir.location\""
          check_passed:
            type: boolean
            example: True
            description: "Indicator for whether the CAA check was successful at this perspective."
          check_type:
            $ref: '#/components/schemas/CheckTypeCAA'
          timestamp_ns:
            type: integer
            format: int64
            description: "The epoch timestamp in nanoseconds of the check."
          attestation:
            type: object
            description: "Information (e.g., digital signatures) from a remote perspective that allows for the response generated to be verified."
          details:
            type: object
            required:
              - caa_record_present
              - found_at
              - records_seen
            description: "Details relating to the CAA lookup at this perspective. Implementations may choose to expose additional details or omit details depending on the result."
            properties:
              caa_record_present:
                description: "Indicates if a record was found when resolving CAA records for an identifier."
                type: boolean
              found_at:
                description: "The domain where CAA records were resolved when performing CAA lookup for identifier. (CAA records may be hosted at parent zone of identifier.)"
                type: string
                nullable: true
              records_seen:
                description: "A list of the records in the RRset retrieved for the CAA lookup. Empty list is acceptable if there are no RRsets"
                type: string
                nullable: true
          errors:
            type: array
            items:
              type: object
              properties:
                error_type:
                  type: string
                  example: "caa:timeout"
                  description: "The type of the error in the format \"type:subtype\"."
                error_message:
                  type: string
                  example: "Experienced a timeout when attempting to query example.com in CAA."
                  description: "An error message explaining the observed error."
            nullable: true

    DCVParams:
      type: object
      required:
        - check_type
        - domain_or_ip_target
        - dcv_check_parameters
      properties:
        check_type:
          $ref: '#/components/schemas/CheckTypeDCV'
        domain_or_ip_target:
          $ref: '#/components/schemas/DomainOrIPTarget'
        orchestration_parameters:
          $ref: '#/components/schemas/OrchestrationParameters'
        dcv_check_parameters:
          $ref: '#/components/schemas/DcvCheckParameters'

    DCVResponse:
      type: object
      required:
        - check_type
        - request_orchestration_parameters
        - actual_orchestration_parameters
        - is_valid
        - perspectives
        - dcv_check_parameters
      properties:
        check_type:
          $ref: '#/components/schemas/CheckTypeDCV'
        is_valid:
          type: boolean
          description: "A boolean indicating if the DCV request was successful."
        request_orchestration_parameters:
          allOf:
          - $ref: '#/components/schemas/OrchestrationParameters'
          nullable: true
        actual_orchestration_parameters:
          $ref: '#/components/schemas/OrchestrationParameters'
        perspectives:
          $ref: '#/components/schemas/PerspectiveResponsesValidation'
        dcv_check_parameters:
          $ref: '#/components/schemas/DcvCheckParameters'

    CAAParams:
      type: object
      required:  # List the required properties here
        - domain_or_ip_target
        - check_type
      properties:
        check_type:
          $ref: '#/components/schemas/CheckTypeCAA'
        domain_or_ip_target: 
          $ref: '#/components/schemas/DomainOrIPTarget'
        orchestration_parameters:
          $ref: '#/components/schemas/OrchestrationParameters'
        caa_check_parameters:
          $ref: '#/components/schemas/CaaCheckParameters'
          
    CAAResponse:
      type: object
      required:
        - check_type
        - request_orchestration_parameters
        - actual_orchestration_parameters
        - is_valid
        - perspectives
        - caa_check_parameters
      properties:
        check_type:
          $ref: '#/components/schemas/CheckTypeCAA'
        is_valid:
          type: boolean
          description: "A boolean indicating if with both the CAA request and validation request was successful."
        request_orchestration_parameters:
          allOf:
          - $ref: '#/components/schemas/OrchestrationParameters'
          nullable: true
        actual_orchestration_parameters:
          $ref: '#/components/schemas/OrchestrationParameters'
        perspectives:
          $ref: '#/components/schemas/PerspectiveResponsesCAA'
        caa_check_parameters:
          allOf:
          - $ref: '#/components/schemas/CaaCheckParameters'
          nullable: true
          
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
security:
  - apiKeyAuth: []